
変数を定義するブロック
locals {
  project　＝""
  env = "dev"
}
resource "" {
  tags = "${local.env}" //local.hogeで参照可能
}

外から変更できる変数
variable "project" {
  type = "string"
  default = "sample-log"
}
resource "" {
  tags = "${var.project}" //var.hogeで参照可能
}
======================
変数の上書きについて
variable "message" {
  type = string
  default = "nothing"
}
①
export TF_VAR_message = "Hellow" //TF_VAR_変数名 で上書き
②
main.tfvars //拡張子を.tfvarsにする(ロジックと変数を切り分けられる)
//main.tfvars
message = "hellow"
③
//コマンド
-var message="hello"
======================
terraformブロックについて
バージョンを指定するなど
terraform {

}
======================
providerブロックについて

provider {
  profile = ""
  region = ""
}
======================
data ブロック
管理対象外のデータを参照するブロック
======================
output ブロック
外部のリソースから参照できるようにするブロック
output "instance_id" {
  value = "sample-id"
}
======================

複数人でtfstateを管理する方法
S3にバケットを用意する
(本来は別のアカウントでバケットを作成する方が良い)

terraform state list コマンド
terraformが管理しているリソースを確認できる

terraform state show <name> コマンド
terraformが管理しているリソースの詳細情報を確認

terraform state mv <source(変更前)> <destination(変更後名)>　コマンド
同時に、tfファイルも変更
※ tfファイルだけを変更すると、新たなリソースを作成されてしまう。NG。

terraform import <address> <id> コマンド
手作業で作成したリソースをterraform管理したいときのコマンド
ex. terraform import aws_instance.test i-****
その後、terraform state show  aws_instance.test コマンドで作成されたコードを見て、tfファイルに必須項目を追記する

手修正を反映
terraform refresh　コマンド
tfstateを最新化するコマンド

メタ引数について
依存関係を手入力する
depends_on

指定された数
count

複数リソース生成
for_each
配列の場合はtoSet関数

dotファイルを作成する
terraform graph

for文について
[for s in var.list : uppercase(s)]
配列からオブジェクト型へ
{for s in var.list : s => uppdercase(s)}
オブジェクトから配列へ
[for key, value in var.object: uppdercase(value)]
オブジェクトからオブジェクト型へ
{for key, value in var.map : key  => uppdercase(value)}

フィルター(else, then は使えない)
[for s in var.list : uppdercase(s) if s != ""]


モジュールについて
moduleディレクトリ
-variables.tf
-main.tf
-outputs.tf
-README.md


//root.tf
モジュールブロック
module "webserver" {
  source = "./modules/dirname"
}

output "instance_id" {
  value = modules.webserver.id
}





































